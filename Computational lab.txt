Euler:
x0=0;
y0=1;
h=0.1;
xn=1;
i=2;
a=zeros(1,10);
b=zeros(1,10);
a(1)=0;b(1)=1;
syms x y
f=@(x,y) (x-y)/2;
while x0<(xn-h)
    y0=y0+h*f(x0,y0);
    x0=x0+h;
    a(i)=x0;
    b(i)=y0;
    i=i+1;
    fprintf("%f\t%f\n",x0,y0);
end
plot(a,b,'o-')
hold on

RKm:
syms x y
f=@(x,y) (x-y)/2;
x0=0;
y0=1;
h=0.1;
i=2;
c=zeros(1,10);
d=zeros(1,10);
c(1)=0;d(1)=1;
xn=1;
while x0<(xn-h)
    k1=h*f(x0,y0);
    k2=h*f(x0+h/2,y0+k1/2);
    k3=h*f(x0+h/2,y0+k2/2);
    k4=h*f(x0+h,y0+k3);
    k=(1/6)*(k1+2*k2+2*k3+k4);
    y0=y0+k;
    x0=x0+h;
    c(i)=x0;
    d(i)=y0;
    i=i+1;
    fprintf("%f\t%f\n",x0,y0);
end
plot(c,d,'o-')

LVPP:
x0=10;
y0=10;
alpha=1;
beta=0.05;
mu=0.02;
eta=0.5;
odefun=@(t,x) [alpha*x(1)-beta*x(1)*x(2);mu*x(1)*x(2)-eta*x(2)];
[t x]=ode45(odefun,[0,100],[x0 y0]);
disp([t x]);
plot(t,x(:,1));
hold on
plot(t,x(:,2));

Trapezoidal
syms x
f= @(x) 1/(1+x^2);
n=input("Subinterval count:");
a=input("Lower limit of integration:");
b=input("Upper limit of integration:");
s=f(a)+f(b);
h=(b-a)/n;
for i=1:n-1
    s=s+2*f(a+i*h);
end
intg=h/2*s;
disp(intg);
act=int(f,x,a,b);
fprintf("Exact:%f\n",act);
fprintf("Approximate:%f\n",intg);
fprintf("Error:%f",abs(act-intg));

Simpson 1/3
syms x
f= @(x) 1/(1+x^2);
n=input("Subinterval count:");
a=input("Lower limit of integration:");
b=input("Upper limit of integration:");
h=(b-a)/n;
s=f(a)+f(b);
xi=a;
for i=1:n-1
    xi=xi+h;
    if mod(i,2)==0
        s=s+2*f(xi);
    else
        s=s+4*f(xi);
    end
end
intg=(h/3)*s;
disp(intg);
act=int(f,x,a,b);
fprintf("Exact:%f\n",act);
fprintf("Approximate:%f\n",intg);
fprintf("Error:%f",abs(act-intg));

Simpson 3/8
syms x
f= @(x) 1/(1+x^2);
n=input("Subinterval count:");
a=input("Lower limit of integration:");
b=input("Upper limit of integration:");
h=(b-a)/n;
s=f(a)+f(b);
xi=a;
for i=1:n-1
    xi=xi+h;
    if mod(i,3)==0
        s=s+2*f(xi);
    else
        s=s+3*f(xi);
    end
end
intg=(3*h/8)*s;
disp(intg);
act=atan(6);
fprintf("Error:%f",abs(act-intg));

Lagrange
n=input("n: ");
x=zeros(n);
y=zeros(n);
for i=1:n
    x(i)=input("x: ");
end
for i=1:n
    y(i)=input("y: ");
end
sum=0;
p=input("Calculated at: ");
for i=1:n
    prod=1;
    for j=1:n
        if i~=j
            prod=prod*((p-x(j))/(x(i)-x(j)));
        end
    end
    sum=sum+prod*y(i);
end
disp(sum);

Newton Forward:
=input("n: ");
x=zeros(n);
y=zeros(n);
for i=1:n
    x(i)=input("x:");
end
for i=1:n
    y(i)=input("y:");
end
k=input("Calculated at: ");
p=(k-x(1))/(x(2)-x(1));
z=1;
sum=y(1);
del_y=zeros(n+1);
for j=1:n
    for i=1:n-j
       del_y(i)=y(i+1)-y(i);
    end
    z=z*(p-j+1)/j;
    sum=sum+z*del_y(1);
    y=del_y;
end
disp(sum);

Newton Backward:
n=input("Number of coordinates");
x=zeros(n);
y=zeros(n);
for i=1:n
    x(i)=input("x:");
end
for i=1:n
    y(i)=input("y:");
end
k=input("Calculated at:");
p=(k-x(n))/(x(2)-x(1));
z=1;
sum=y(n);
for j=1:n-1
    del_y=[];
    z=z*(p+j-1)/j;
    for i=1:length(y)-1
       del_y(i)=y(i+1)-y(i);
    end
    y=del_y;
    sum=sum+z*del_y(length(del_y));
end
disp(sum);

Gauss Jacobi and Seidal
A=[8,-3,2;4 11 -1;6 3 12];
B=[20;33;35];
x=[1;2;3];
tol=1e-4;
for it=1:100
    x1=x;
    for i=1:length(x)
        x(i)=(B(i)-A(i,[1:i-1,i+1:end])*x1([1:i-1,i+1:end]))/A(i,i);
    end
        if norm(x1-x)<tol
            break;
        end
end
disp("Gauss Jacobi method:");
disp(x);
disp(it);
x=[1;2;3];
for it=1:100
    x1=x;
    for i=1:length(x)
        x(i)=(B(i)-A(i,1:i-1)*x(1:i-1)-A(i, i+1:end)*x1(i+1:end))/A(i,i);
    end
        if norm(x1-x)<tol
            break;
        end
end
disp("Gauss Siedal method:");
disp(x);
disp(it);

Newton Raphson
syms x
f =@(x) 3*x-cos(x)-1;
g =@(x) sin(x)+3;
tol=1e-4;
x0=0;
k=0;
for i=1:100
    n=i;
    x1=x0-f(x0)/g(x0);
    if abs(x1-x0)<tol
        break;
    end
    if g(x1)==0
        disp("Denominator cannot be zero,method failed");
    end
    x0=x1;
end
 disp(x1);
 disp(n);

Secant
f=@(x) exp(-x)-x;
a=0;
b=1;
k=0;
tol=1e-4;
while (abs(b-a)>=tol)
     s = (a*f(b)-b*f(a))/(f(b)-f(a));
     if abs(s-a)==0
        break;
     end 
     a=b;
     b=s;
     k=k+1;
end
disp(s);
disp(k);

Bisection
f = @(x) x^3-3*x+4;
a=input("Lower bound: ");
b=input("Upper bound: ");
tol=1e-4;
while (abs(b-a)>=tol)
     m = (a+b)/2;
     if f(a)*f(m)<0
         b=m;
     else
         a=m;
     end
end
disp(m);

Regular Falsi
a=2;
b=3;
k=0;
tol=1e-4;
while (abs(b-a)>=tol)
     s = (a*f(b)-b*f(a))/(f(b)-f(a));
     if f(a)*f(s)<0
         b=s;
     else
         a=s;
     end
    k=k+1;
end
disp(s);
disp(k);
